// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: params.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Parameters that have to be agreed on by manifester and daemon.
type GlobalParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Digest algorithm, e.g. "sha256"
	DigestAlgo string `protobuf:"bytes,2,opt,name=digest_algo,json=digestAlgo,proto3" json:"digest_algo,omitempty"`
	// Bits of digest used, e.g. 192
	DigestBits    int32 `protobuf:"varint,3,opt,name=digest_bits,json=digestBits,proto3" json:"digest_bits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalParams) Reset() {
	*x = GlobalParams{}
	mi := &file_params_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalParams) ProtoMessage() {}

func (x *GlobalParams) ProtoReflect() protoreflect.Message {
	mi := &file_params_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalParams.ProtoReflect.Descriptor instead.
func (*GlobalParams) Descriptor() ([]byte, []int) {
	return file_params_proto_rawDescGZIP(), []int{0}
}

func (x *GlobalParams) GetDigestAlgo() string {
	if x != nil {
		return x.DigestAlgo
	}
	return ""
}

func (x *GlobalParams) GetDigestBits() int32 {
	if x != nil {
		return x.DigestBits
	}
	return 0
}

// Parameters that can be used to configure a styx daemon.
type DaemonParams struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Params *GlobalParams          `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// URL for manifester service, chunk reads, and chunk diffs.
	ManifesterUrl    string `protobuf:"bytes,2,opt,name=manifester_url,json=manifesterUrl,proto3" json:"manifester_url,omitempty"`
	ManifestCacheUrl string `protobuf:"bytes,5,opt,name=manifest_cache_url,json=manifestCacheUrl,proto3" json:"manifest_cache_url,omitempty"`
	ChunkReadUrl     string `protobuf:"bytes,3,opt,name=chunk_read_url,json=chunkReadUrl,proto3" json:"chunk_read_url,omitempty"`
	ChunkDiffUrl     string `protobuf:"bytes,4,opt,name=chunk_diff_url,json=chunkDiffUrl,proto3" json:"chunk_diff_url,omitempty"`
	// Size to shard manifest. If missing, daemon uses a default.
	ShardManifestBytes int64 `protobuf:"varint,6,opt,name=shard_manifest_bytes,json=shardManifestBytes,proto3" json:"shard_manifest_bytes,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DaemonParams) Reset() {
	*x = DaemonParams{}
	mi := &file_params_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DaemonParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonParams) ProtoMessage() {}

func (x *DaemonParams) ProtoReflect() protoreflect.Message {
	mi := &file_params_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonParams.ProtoReflect.Descriptor instead.
func (*DaemonParams) Descriptor() ([]byte, []int) {
	return file_params_proto_rawDescGZIP(), []int{1}
}

func (x *DaemonParams) GetParams() *GlobalParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *DaemonParams) GetManifesterUrl() string {
	if x != nil {
		return x.ManifesterUrl
	}
	return ""
}

func (x *DaemonParams) GetManifestCacheUrl() string {
	if x != nil {
		return x.ManifestCacheUrl
	}
	return ""
}

func (x *DaemonParams) GetChunkReadUrl() string {
	if x != nil {
		return x.ChunkReadUrl
	}
	return ""
}

func (x *DaemonParams) GetChunkDiffUrl() string {
	if x != nil {
		return x.ChunkDiffUrl
	}
	return ""
}

func (x *DaemonParams) GetShardManifestBytes() int64 {
	if x != nil {
		return x.ShardManifestBytes
	}
	return 0
}

type SignedMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Params for hashing/chunking contained data, and also used for signature.
	Params *GlobalParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// Single entry representing contained data.
	// Type must be REGULAR.
	// Path should represent message type and context.
	Msg *Entry `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// These should be the same length:
	KeyId         []string `protobuf:"bytes,3,rep,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Signature     [][]byte `protobuf:"bytes,4,rep,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignedMessage) Reset() {
	*x = SignedMessage{}
	mi := &file_params_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedMessage) ProtoMessage() {}

func (x *SignedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_params_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedMessage.ProtoReflect.Descriptor instead.
func (*SignedMessage) Descriptor() ([]byte, []int) {
	return file_params_proto_rawDescGZIP(), []int{2}
}

func (x *SignedMessage) GetParams() *GlobalParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SignedMessage) GetMsg() *Entry {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *SignedMessage) GetKeyId() []string {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *SignedMessage) GetSignature() [][]byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_params_proto protoreflect.FileDescriptor

const file_params_proto_rawDesc = "" +
	"\n" +
	"\fparams.proto\x12\x02pb\x1a\ventry.proto\"V\n" +
	"\fGlobalParams\x12\x1f\n" +
	"\vdigest_algo\x18\x02 \x01(\tR\n" +
	"digestAlgo\x12\x1f\n" +
	"\vdigest_bits\x18\x03 \x01(\x05R\n" +
	"digestBitsJ\x04\b\x01\x10\x02\"\x8b\x02\n" +
	"\fDaemonParams\x12(\n" +
	"\x06params\x18\x01 \x01(\v2\x10.pb.GlobalParamsR\x06params\x12%\n" +
	"\x0emanifester_url\x18\x02 \x01(\tR\rmanifesterUrl\x12,\n" +
	"\x12manifest_cache_url\x18\x05 \x01(\tR\x10manifestCacheUrl\x12$\n" +
	"\x0echunk_read_url\x18\x03 \x01(\tR\fchunkReadUrl\x12$\n" +
	"\x0echunk_diff_url\x18\x04 \x01(\tR\fchunkDiffUrl\x120\n" +
	"\x14shard_manifest_bytes\x18\x06 \x01(\x03R\x12shardManifestBytes\"\x8b\x01\n" +
	"\rSignedMessage\x12(\n" +
	"\x06params\x18\x01 \x01(\v2\x10.pb.GlobalParamsR\x06params\x12\x1b\n" +
	"\x03msg\x18\x02 \x01(\v2\t.pb.EntryR\x03msg\x12\x15\n" +
	"\x06key_id\x18\x03 \x03(\tR\x05keyId\x12\x1c\n" +
	"\tsignature\x18\x04 \x03(\fR\tsignatureB\x18Z\x16github.com/dnr/styx/pbb\x06proto3"

var (
	file_params_proto_rawDescOnce sync.Once
	file_params_proto_rawDescData []byte
)

func file_params_proto_rawDescGZIP() []byte {
	file_params_proto_rawDescOnce.Do(func() {
		file_params_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_params_proto_rawDesc), len(file_params_proto_rawDesc)))
	})
	return file_params_proto_rawDescData
}

var file_params_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_params_proto_goTypes = []any{
	(*GlobalParams)(nil),  // 0: pb.GlobalParams
	(*DaemonParams)(nil),  // 1: pb.DaemonParams
	(*SignedMessage)(nil), // 2: pb.SignedMessage
	(*Entry)(nil),         // 3: pb.Entry
}
var file_params_proto_depIdxs = []int32{
	0, // 0: pb.DaemonParams.params:type_name -> pb.GlobalParams
	0, // 1: pb.SignedMessage.params:type_name -> pb.GlobalParams
	3, // 2: pb.SignedMessage.msg:type_name -> pb.Entry
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_params_proto_init() }
func file_params_proto_init() {
	if File_params_proto != nil {
		return
	}
	file_entry_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_params_proto_rawDesc), len(file_params_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_params_proto_goTypes,
		DependencyIndexes: file_params_proto_depIdxs,
		MessageInfos:      file_params_proto_msgTypes,
	}.Build()
	File_params_proto = out.File
	file_params_proto_goTypes = nil
	file_params_proto_depIdxs = nil
}
